import os
import string
import time
from Graph.graph import Graph
from Ranker.ranker import Ranker
from Searcher.maxheap import MaxHeap
from Searcher.query import Query
from Searcher.result import Result
import threading


def similarities_for_testing(java_project_name :string):
    switcher = {
        'src1': {(1, 1): 1.0, (1, 2): 0.5, (1, 3): 0.6805555555555556, (1, 4): 0.5, (1, 5): 0.75, (1, 6): 0.5555555555555556, (1, 7): 0.6097727137234901, (1, 11): 0.75, (1, 12): 0.25, (1, 13): 0.3012596570051089, (1, 14): 0.3490199519692301, (1, 15): 0.3039324782817448, (1, 16): 0.4305555555555556, (1, 17): 0.27562982850255446, (1, 18): 0.25, (1, 19): 0.5, (1, 20): 0.27562982850255446, (1, 21): 0.25, (1, 22): 0.44813320144815283, (1, 23): 0.3055555555555556, (1, 24): 0.35977271372349007, (1, 25): 0.30553452859346225, (1, 26): 0.26885943649970134, (1, 27): 0.30884308642903857, (2, 1): 0.5, (2, 2): 1.0, (2, 3): 0.5, (2, 4): 0.5, (2, 5): 0.5, (2, 6): 0.5, (2, 7): 0.5, (2, 11): 0.25, (2, 12): 0.25, (2, 13): 0.25, (2, 14): 0.25, (2, 15): 0.25, (2, 16): 0.25, (2, 17): 0.25, (2, 18): 0.25, (2, 19): 0.25, (2, 20): 0.25, (2, 21): 0.25, (2, 22): 0.25, (2, 23): 0.25, (2, 24): 0.25, (2, 25): 0.25, (2, 26): 0.25, (2, 27): 0.25, (3, 1): 0.6097727137234901, (3, 2): 0.5, (3, 3): 0.6004313363236333, (3, 4): 0.5, (3, 5): 0.554886356861745, (3, 6): 0.6286006380653804, (3, 7): 1.0, (3, 11): 0.35977271372349007, (3, 12): 0.25, (3, 13): 0.29703808016013306, (3, 14): 0.42516351262743685, (3, 15): 0.4266461500770891, (3, 16): 0.3504313363236334, (3, 17): 0.32397875137774945, (3, 18): 0.25, (3, 19): 0.30488635686174503, (3, 20): 0.32397875137774945, (3, 21): 0.25, (3, 22): 0.3322587599936632, (3, 23): 0.3786006380653803, (3, 24): 0.75, (3, 25): 0.3070289967419445, (3, 26): 0.2676911125768552, (3, 27): 0.30276415435889864},
        'src2': {(1, 1): 0.5256298285025545, (1, 2): 0.5350587761160629, (1, 3): 0.55, (1, 4): 0.5838287362707303, (1, 5): 0.5510051020063448, (1, 6): 0.5312366945050422, (1, 7): 0.6018085059165598, (1, 8): 0.5, (1, 9): 0.9165178581582609, (1, 10): 0.5831092667924672, (1, 11): 0.5, (1, 12): 0.5795859544951804, (1, 13): 0.5227272727272727, (1, 14): 0.7332589290791305, (1, 15): 0.5, (1, 16): 0.5384615384615384, (1, 17): 0.5562366945050421, (1, 18): 0.5974983074801437, (1, 31): 0.25, (1, 32): 0.3000961310047435, (1, 33): 0.30488635686174503, (1, 34): 0.25, (1, 35): 0.30488635686174503, (1, 36): 0.25, (1, 37): 0.3000961310047435, (1, 38): 0.30488635686174503, (1, 39): 0.3518085059165598, (1, 40): 0.3518085059165598, (1, 41): 0.34125436513240215, (1, 42): 0.25, (1, 43): 0.3206376319650034, (1, 44): 0.32932982212988704, (1, 45): 0.29703808016013306, (1, 46): 0.3010051020063447, (1, 47): 0.31624146882411464, (1, 48): 0.3360781437883882, (1, 49): 0.25, (1, 50): 0.3000961310047435, (1, 51): 0.30488635686174503, (1, 52): 0.30488635686174503, (1, 53): 0.25, (1, 54): 0.3000961310047435, (1, 55): 0.30488635686174503, (1, 56): 0.31951138879980717, (1, 57): 0.25, (1, 58): 0.25, (1, 59): 0.3000961310047435, (1, 60): 0.30488635686174503, (1, 61): 0.3055555555555556, (1, 62): 0.3124733890100843, (1, 63): 0.28791101533839775, (1, 64): 0.27082446300336144, (1, 65): 0.27082446300336144, (1, 66): 0.2916489260067229, (1, 67): 0.2859759781548766, (1, 68): 0.3238817660001483, (1, 69): 0.32671028718384826, (1, 70): 0.33582333465679054, (1, 71): 0.42633041572278174, (1, 72): 0.30831559267338954, (1, 73): 0.30623669450504215, (1, 74): 0.25, (1, 75): 0.33683776431618145, (1, 76): 0.37545816827326267, (1, 77): 0.37545816827326267, (1, 78): 0.37545816827326267, (1, 79): 0.3182401628376671, (1, 80): 0.3182401628376671, (1, 81): 0.3237457933614464, (1, 82): 0.34749830748014365, (1, 83): 0.3153526419735003, (1, 84): 0.30488635686174503, (2, 1): 0.5, (2, 2): 0.5, (2, 3): 0.5, (2, 4): 0.5, (2, 5): 0.5, (2, 6): 0.5, (2, 7): 0.5, (2, 8): 0.5, (2, 9): 0.5, (2, 10): 0.5, (2, 11): 0.5, (2, 12): 0.5, (2, 13): 0.5, (2, 14): 0.5, (2, 15): 0.5, (2, 16): 0.5, (2, 17): 0.5, (2, 18): 0.5, (2, 31): 0.25, (2, 32): 0.25, (2, 33): 0.25, (2, 34): 0.25, (2, 35): 0.25, (2, 36): 0.25, (2, 37): 0.25, (2, 38): 0.25, (2, 39): 0.25, (2, 40): 0.25, (2, 41): 0.25, (2, 42): 0.25, (2, 43): 0.25, (2, 44): 0.25, (2, 45): 0.25, (2, 46): 0.25, (2, 47): 0.25, (2, 48): 0.25, (2, 49): 0.25, (2, 50): 0.25, (2, 51): 0.25, (2, 52): 0.25, (2, 53): 0.25, (2, 54): 0.25, (2, 55): 0.25, (2, 56): 0.25, (2, 57): 0.25, (2, 58): 0.25, (2, 59): 0.25, (2, 60): 0.25, (2, 61): 0.25, (2, 62): 0.25, (2, 63): 0.25, (2, 64): 0.25, (2, 65): 0.25, (2, 66): 0.25, (2, 67): 0.25, (2, 68): 0.25, (2, 69): 0.25, (2, 70): 0.25, (2, 71): 0.25, (2, 72): 0.25, (2, 73): 0.25, (2, 74): 0.25, (2, 75): 0.25, (2, 76): 0.25, (2, 77): 0.25, (2, 78): 0.25, (2, 79): 0.25, (2, 80): 0.25, (2, 81): 0.25, (2, 82): 0.25, (2, 83): 0.25, (2, 84): 0.25, (3, 1): 0.5235190400800666, (3, 2): 0.5357197607359655, (3, 3): 0.8049637855411499, (3, 4): 0.6111211409088293, (3, 5): 0.5625083834662984, (3, 6): 0.5821635439653168, (3, 7): 0.6407657789757358, (3, 8): 0.5, (3, 9): 0.5512596570051089, (3, 10): 0.6538652024724398, (3, 11): 0.5, (3, 12): 0.6755728376591129, (3, 13): 0.5322630894704076, (3, 14): 0.7354461821327054, (3, 15): 0.5, (3, 16): 0.5716559939618273, (3, 17): 0.7450904410675574, (3, 18): 0.6169441681642582, (3, 31): 0.25, (3, 32): 0.3158483432556086, (3, 33): 0.3231847199926816, (3, 34): 0.25, (3, 35): 0.3231847199926816, (3, 36): 0.25, (3, 37): 0.3158483432556086, (3, 38): 0.3231847199926816, (3, 39): 0.39076577897573583, (3, 40): 0.39076577897573583, (3, 41): 0.38013437578246384, (3, 42): 0.25, (3, 43): 0.34326039003420983, (3, 44): 0.38300148725491123, (3, 45): 0.29345894436490716, (3, 46): 0.3125083834662984, (3, 47): 0.3625001495429703, (3, 48): 0.3437450779713405, (3, 49): 0.25, (3, 50): 0.3158483432556086, (3, 51): 0.3231847199926816, (3, 52): 0.3231847199926816, (3, 53): 0.25, (3, 54): 0.3158483432556086, (3, 55): 0.3231847199926816, (3, 56): 0.31963537497855005, (3, 57): 0.25, (3, 58): 0.25, (3, 59): 0.3158483432556086, (3, 60): 0.3231847199926816, (3, 61): 0.3786006380653803, (3, 62): 0.33001201873074193, (3, 63): 0.292350032963625, (3, 64): 0.27667067291024733, (3, 65): 0.27667067291024733, (3, 66): 0.33144636888712514, (3, 67): 0.29817939922385234, (3, 68): 0.3937192313496559, (3, 69): 0.3507514335161335, (3, 70): 0.3546334516864195, (3, 71): 0.4336347943320509, (3, 72): 0.44006430028861887, (3, 73): 0.4950904410675574, (3, 74): 0.25, (3, 75): 0.30488455266832026, (3, 76): 0.3835994933998761, (3, 77): 0.3835994933998761, (3, 78): 0.3835994933998761, (3, 79): 0.31748589424613327, (3, 80): 0.31748589424613327, (3, 81): 0.32234939337540214, (3, 82): 0.3669441681642583, (3, 83): 0.32212689727481514, (3, 84): 0.3231847199926816},
        'src3': {(1, 1): 0.5, (1, 2): 0.5, (1, 3): 0.6411436228230354, (1, 4): 0.664942903780054, (1, 5): 0.5799672998586743, (1, 6): 0.7899836499293371, (1, 7): 0.5555555555555556, (1, 8): 0.5624733890100843, (1, 9): 0.5312366945050422, (1, 10): 0.6018085059165598, (1, 13): 0.25, (1, 14): 0.30631370309339767, (1, 15): 0.45297371266213504, (1, 16): 0.25, (1, 17): 0.30631370309339767, (1, 18): 0.39114362282303533, (1, 19): 0.2899836499293372, (1, 20): 0.25, (1, 21): 0.30631370309339767, (1, 22): 0.30135607311788376, (1, 23): 0.30135607311788376, (1, 24): 0.29579741517178354, (1, 25): 0.3397310669047421, (1, 26): 0.33878578212289717, (1, 27): 0.36417148934194943, (1, 28): 0.35487625399626904, (1, 29): 0.33878578212289717, (1, 30): 0.28123669450504213, (1, 31): 0.3299672998586744, (1, 32): 0.3299672998586744, (1, 33): 0.3039324782817448, (1, 34): 0.29385943649970137, (1, 35): 0.3182401628376671, (1, 36): 0.3012596570051089, (1, 37): 0.3012596570051089, (1, 38): 0.25, (1, 39): 0.28123669450504213, (1, 40): 0.3055555555555556, (1, 41): 0.28851705483841283, (1, 42): 0.36509817523571003, (1, 43): 0.36417148934194943, (1, 44): 0.3153526419735003, (1, 45): 0.3221230339763534, (1, 46): 0.4982425790084677, (1, 47): 0.29748022962291953, (1, 48): 0.5399836499293371, (1, 49): 0.5399836499293371, (1, 50): 0.5399836499293371, (1, 51): 0.30884308642903857, (1, 52): 0.3182401628376671, (1, 53): 0.31561347843189164, (1, 54): 0.25, (1, 55): 0.3012596570051089, (1, 56): 0.2777777777777778, (1, 57): 0.36509817523571003, (1, 58): 0.3624354444796001, (1, 59): 0.36417148934194943, (1, 60): 0.28851705483841283, (1, 61): 0.32703410967682567, (1, 62): 0.3055555555555556, (1, 63): 0.3124733890100843, (1, 64): 0.3299672998586744, (1, 65): 0.28123669450504213, (1, 66): 0.3299672998586744, (1, 67): 0.2777777777777778, (1, 68): 0.30754908761785504, (1, 69): 0.3357059391645538, (1, 70): 0.2857142857142857, (1, 71): 0.35334650278963853, (1, 72): 0.3518085059165598, (1, 73): 0.3299672998586744, (2, 1): 0.5, (2, 2): 0.5, (2, 3): 0.5, (2, 4): 0.5, (2, 5): 0.5, (2, 6): 0.5, (2, 7): 0.5, (2, 8): 0.5, (2, 9): 0.5, (2, 10): 0.5, (2, 13): 0.25, (2, 14): 0.25, (2, 15): 0.25, (2, 16): 0.25, (2, 17): 0.25, (2, 18): 0.25, (2, 19): 0.25, (2, 20): 0.25, (2, 21): 0.25, (2, 22): 0.25, (2, 23): 0.25, (2, 24): 0.25, (2, 25): 0.25, (2, 26): 0.25, (2, 27): 0.25, (2, 28): 0.25, (2, 29): 0.25, (2, 30): 0.25, (2, 31): 0.25, (2, 32): 0.25, (2, 33): 0.25, (2, 34): 0.25, (2, 35): 0.25, (2, 36): 0.25, (2, 37): 0.25, (2, 38): 0.25, (2, 39): 0.25, (2, 40): 0.25, (2, 41): 0.25, (2, 42): 0.25, (2, 43): 0.25, (2, 44): 0.25, (2, 45): 0.25, (2, 46): 0.25, (2, 47): 0.25, (2, 48): 0.25, (2, 49): 0.25, (2, 50): 0.25, (2, 51): 0.25, (2, 52): 0.25, (2, 53): 0.25, (2, 54): 0.25, (2, 55): 0.25, (2, 56): 0.25, (2, 57): 0.25, (2, 58): 0.25, (2, 59): 0.25, (2, 60): 0.25, (2, 61): 0.25, (2, 62): 0.25, (2, 63): 0.25, (2, 64): 0.25, (2, 65): 0.25, (2, 66): 0.25, (2, 67): 0.25, (2, 68): 0.25, (2, 69): 0.25, (2, 70): 0.25, (2, 71): 0.25, (2, 72): 0.25, (2, 73): 0.25, (3, 1): 0.5, (3, 2): 0.5, (3, 3): 0.5729577297578526, (3, 4): 0.697469703067745, (3, 5): 0.7931485559815243, (3, 6): 0.7014606348525072, (3, 7): 0.6286006380653804, (3, 8): 0.5800120187307419, (3, 9): 0.5400060093653709, (3, 10): 0.5764848742442973, (3, 13): 0.25, (3, 14): 0.39795750275549896, (3, 15): 0.3783096051309688, (3, 16): 0.25, (3, 17): 0.39795750275549896, (3, 18): 0.32295772975785264, (3, 19): 0.32397875137774945, (3, 20): 0.25, (3, 21): 0.39795750275549896, (3, 22): 0.28754246872893174, (3, 23): 0.28754246872893174, (3, 24): 0.27815685154669884, (3, 25): 0.35782259860654375, (3, 26): 0.32637798986554056, (3, 27): 0.35245968139552497, (3, 28): 0.4035560375579359, (3, 29): 0.32637798986554056, (3, 30): 0.32700321202903687, (3, 31): 0.5431485559815243, (3, 32): 0.5431485559815243, (3, 33): 0.3433377498914876, (3, 34): 0.34985465654217196, (3, 35): 0.33112411189486823, (3, 36): 0.29703808016013306, (3, 37): 0.29703808016013306, (3, 38): 0.25, (3, 39): 0.2931772246271277, (3, 40): 0.33001201873074193, (3, 41): 0.2897609357364556, (3, 42): 0.3464422766376835, (3, 43): 0.35245968139552497, (3, 44): 0.32212689727481514, (3, 45): 0.3279548247780264, (3, 46): 0.3671979000177791, (3, 47): 0.3664874196916406, (3, 48): 0.45146063485250715, (3, 49): 0.45146063485250715, (3, 50): 0.45146063485250715, (3, 51): 0.41426539056761735, (3, 52): 0.33112411189486823, (3, 53): 0.42009331807082867, (3, 54): 0.25, (3, 55): 0.29703808016013306, (3, 56): 0.29000600936537096, (3, 57): 0.3464422766376835, (3, 58): 0.36922370053605585, (3, 59): 0.35245968139552497, (3, 60): 0.2897609357364556, (3, 61): 0.3717203710892494, (3, 62): 0.3786006380653803, (3, 63): 0.33001201873074193, (3, 64): 0.3662634466633547, (3, 65): 0.29000600936537096, (3, 66): 0.3662634466633547, (3, 67): 0.29000600936537096, (3, 68): 0.2982211383188418, (3, 69): 0.37219988969659124, (3, 70): 0.3216559939618273, (3, 71): 0.3495861582450541, (3, 72): 0.3264848742442973, (3, 73): 0.3662634466633547}
    }
    return switcher.get(java_project_name, {})


class Searcher:
    def __init__(self, graph:Graph, query:Query, similarities:list={}):
        self.graph :Graph = graph
        self.query :Query = query
        self.__ranker :Ranker = Ranker()
        self.__results :MaxHeap = MaxHeap()
        self.similarities :list = similarities

    def class_based_similarity(self):
        pass

    def class_relationship_based_similarity(self, threshold, k):
        pass

    def __calculate_similarities(self, vertices) -> None:
        if len(vertices) == 0:
            vertices = self.graph.get_vertices()
        for vertex1 in self.query.graph.get_vertices():
            for vertex2 in vertices:
                # print(threading.get_ident())
                sim = self.__ranker.get_rank(vertex1, vertex2)
                self.similarities[vertex1.key, vertex2.key] = sim


    def calculate_similarities_multi_threaded(self) -> None:
        vertices_list = self.graph.get_vertices()
        length = len(vertices_list)
        middle_index = length // 3

        first = vertices_list[:middle_index]
        second = vertices_list[middle_index:2*middle_index]
        third = vertices_list[2*middle_index:3*middle_index]

        t1 = threading.Thread(self.__calculate_similarities(first))
        t2 = threading.Thread(self.__calculate_similarities(second))
        t3 = threading.Thread(self.__calculate_similarities(third))

        t1.start()
        t2.start()
        t3.start()
        t1.join()
        t2.join()
        t3.join()

    def __get_first_nodes(self) ->list:
        vertices = {}
        for vertex1 in self.query.graph.get_vertices():
            max_sim = 0
            vertex = None
            for vertex2 in self.graph.get_vertices():
                sim = self.similarities[vertex1.key, vertex2.key]
                if sim>max_sim:
                    max_sim=sim
                    vertex = vertex2
            if(vertex not in vertices.keys() or vertices[vertex] < max_sim):
                vertices[vertex] = max_sim
        return vertices

    def search(self, k=2, threshold = 1):
        start_time = time.time()
        # self.__calculate_similarities()
        self.calculate_similarities_multi_threaded()

        first_vertices = self.__get_first_nodes()
        self.__results = MaxHeap(len(first_vertices) * 2 + 1)
        for vertex in first_vertices.keys():
            rank = first_vertices[vertex]
            result = Result()
            result.add_vertex(vertex, rank)
            visited = set()
            visited.add(vertex.key)
            self.__greedy_algorithm_recursive(result, 2, threshold, visited)
            rank = result.get_rank() / self.query.graph.num_of_vertices()
            self.__results.insert(rank, result)
        end_time = time.time()
        total_time = end_time - start_time
        print(total_time)

        # # TESTING:
        # vertex = list(first_vertices)[0]
        # result = Result()
        # result.add_vertex(vertex, 1)
        # visited = set()
        # visited.add(vertex.key)
        # self.__greedy_algorithm_recursive(result, 2, threshold, visited)
        # print(result.graph.toJson())
        # # END

    def get_results(self):
        while self.__results.size > 0:
            element = self.__results.extractMax()
            print(element.rank, element.element.graph.toJson())
            element.element.graph.draw()

    def __greedy_algorithm_recursive(self, result:Result, k, th, visited:set) -> Result:
        if k==0:
            return result
        max_sim = 0
        edge = None
        vertex = None
        for vertex1 in self.query.graph.get_vertices():
            for vertex2 in result.graph.get_vertices():
                for neighbor in vertex2.neighbors:
                    if neighbor.key not in visited:
                        sim = self.similarities[vertex1.key, neighbor.key]
                        if sim > max_sim:
                            max_sim = sim
                            vertex = neighbor
                            edge = self.graph.get_edge(vertex2.key, vertex.key)

        if vertex is None:
            return result
        result.add_vertex(vertex, max_sim)
        result.add_edge(edge)
        visited.add(vertex.key)
        self.__greedy_algorithm_recursive(result, k - 1, 0, visited)


def main():
    query = Query("class list implements class iterable,class list contains class node")
    graph = Graph('../Files/json graphs/src1.json')
    searcher = Searcher(graph, query)
    searcher.search()
    searcher.get_results()


if __name__ == '__main__':
    main()